-커널은 시스템을 통제하는 운영체제의 핵심이다.
보안, 자원관리, 추상화를 통해 관리한다.
추상화는 하드웨어에 직접 접근하지 않고 추상화된 인터페이스를 하드웨어에 제공한다.

-커널 프로그래밍
커널에 코어 기능을 추가하기 위함.
리눅스 커널 모듈 구현.
시스템콜은 app이 커널과 소통하는 방식이다.
커널 프로그램은 app과 다른 메모리 메핑법을 가짐.
커널 프로그래밍에서는 일반 라이브러리를 사용할 수 없음.
커널 라이브러리를 사용함.

-시스템콜 : 소프트웨어 인터럽트를 통해 커널에 서비스를 요청한다.
user process와 kernel간의 인터페이스.
일반적으로 user process는 kernel영역에 접근할 수 없지만 
필요할 때가 있다. 이때 사용하는 것이 시스템 콜이다.
운영체제 인터페이스 posix api 유닉스 운영체계에 기반을 두는 표준 운영체계 인터페이스

#systemcall 등이 있는 리눅스 파일에 새로운 디렉토리 만들어서 시스템콜 파일 추가하기.
#리눅스 파일을 추가할 때 시스템 콜을 추가하기 위해서는 리눅스가 담겨 있는 파일에 디렉토리를 추가해 파일을 생성하면 된다.
필요한 정보 : 리눅스 소스 위치, systemcall 테이블 위치, source, build 위치, 리눅스 makefile, syscallheader
1.uname -rs : linux 버전 체크
2.
a.리눅스 소스 가져와서 연결하기.
b.systemcall 구현하고 컴파일 때 사용할 makefile추가.
c.구현한 systemcall 사용할 수 있도록 header 파일에 추가하고.(syscalls.h)+ 시스템콜 테이블에 추가하기.
d.컴파일 및 재부팅
e.해당 시스템 콜 사용 프로그램 작성(테이블 쓴 syscall number 삽입.)